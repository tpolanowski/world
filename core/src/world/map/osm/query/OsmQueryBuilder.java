package world.map.osm.query;

import hu.supercluster.overpasser.library.output.OutputFormat;
import hu.supercluster.overpasser.library.output.OutputModificator;
import hu.supercluster.overpasser.library.output.OutputOrder;
import hu.supercluster.overpasser.library.output.OutputVerbosity;
import hu.supercluster.overpasser.library.query.OverpassQuery;

import static hu.supercluster.overpasser.library.output.OutputFormat.JSON;

public class OsmQueryBuilder {
    private static final int TIMEOUT = 30;
    private static final OutputFormat OUTPUT_FORMAT = JSON;

    public static String buildQueryForNature(OsmQueryParameters params) {
        String result = new OverpassQuery()
//                .format(OUTPUT_FORMAT)
                .boundingBox(
                        params.getMapCoords().getSouthernLat(),
                        params.getMapCoords().getWesternLon(),
                        params.getMapCoords().getNorthernLat(),
                        params.getMapCoords().getEasternLon()
                )
                .filterQuery()
                .way()
                .tag("landuse", "forest")
                .prepareNext()
                .rel()
                .tag("landuse", "forest")
                .prepareNext()
                .way()
                .tag("leisure", "park")
                .prepareNext()
                .rel()
                .tag("leisure", "park")
                .prepareNext()
                .way()
                .tag("landuse", "grass")
                .prepareNext()
                .rel()
                .tag("landuse", "grass")
                .prepareNext()
                .way()
                .tag("landuse", "allotments")
                .prepareNext()
                .rel()
                .tag("landuse", "allotments")
                .prepareNext()
                .way()
                .tag("landuse", "farm")
                .prepareNext()
                .rel()
                .tag("landuse", "farm")
                .prepareNext()
                .way()
                .tag("landuse", "farmland")
                .prepareNext()
                .rel()
                .tag("landuse", "farmland")
                .prepareNext()
                .way()
                .tag("landuse", "farmyard")
                .prepareNext()
                .rel()
                .tag("landuse", "farmyard")
                .prepareNext()
                .way()
                .tag("landuse", "greenfield")
                .prepareNext()
                .rel()
                .tag("landuse", "greenfield")
                .prepareNext()
                .way()
                .tag("landuse", "meadow")
                .prepareNext()
                .rel()
                .tag("landuse", "meadow")
                .prepareNext()
                .way()
                .tag("landuse", "orchard")
                .prepareNext()
                .rel()
                .tag("landuse", "orchard")
                .prepareNext()
                .way()
                .tag("landuse", "recreation_ground")
                .prepareNext()
                .rel()
                .tag("landuse", "recreation_ground")
                .prepareNext()
                .way()
                .tag("landuse", "reservoir")
                .prepareNext()
                .rel()
                .tag("landuse", "reservoir")
                .prepareNext()
                .way()
                .tag("landuse", "village_green")
                .prepareNext()
                .rel()
                .tag("landuse", "village_green")
                .prepareNext()
                .way()
                .tag("leisure", "nature_reserve")
                .prepareNext()
                .rel()
                .tag("leisure", "nature_reserve")
                .prepareNext()
                .way()
                .tag("natural", "heath")
                .prepareNext()
                .rel()
                .tag("natural", "heath")
                .prepareNext()
                .way()
                .tag("natural", "scrub")
                .prepareNext()
                .rel()
                .tag("natural", "scrub")
                .prepareNext()
                .way()
                .tag("natural", "tree")
                .prepareNext()
                .rel()
                .tag("natural", "tree")
                .prepareNext()
                .way()
                .tag("natural", "tree_row")
                .prepareNext()
                .rel()
                .tag("natural", "tree_row")
                .prepareNext()
                .way()
                .tag("natural", "wood")
                .prepareNext()
                .rel()
                .tag("natural", "wood")
                .prepareNext()
                .way()
                .tag("surface", "grass")
                .prepareNext()
                .rel()
                .tag("surface", "grass")
                .prepareNext()
                .way()
                .tag("natural", "valley")
                .prepareNext()
                .rel()
                .tag("natural", "valley")
                .prepareNext()
                .way()
                .tag("natural", "stone")
                .prepareNext()
                .rel()
                .tag("natural", "stone")
                .prepareNext()
                .way()
                .tag("natural", "rock")
                .prepareNext()
                .rel()
                .tag("natural", "rock")
                .prepareNext()
                .way()
                .tag("natural", "ridge")
                .prepareNext()
                .rel()
                .tag("natural", "ridge")
                .prepareNext()
                .way()
                .tag("surface", "dirt")
                .prepareNext()
                .rel()
                .tag("surface", "dirt")
                .prepareNext()
                .way()
                .tag("surface", "ground")
                .prepareNext()
                .rel()
                .tag("surface", "ground")
                .end()
                .output(OutputVerbosity.BODY, OutputModificator.CENTER, OutputOrder.QT, params.getOutputLimit())
                .build();

        result = "[out:json]" + result; // hack to add format in proper way, .format() in builder not working
        System.out.println("http://overpass-api.de/api/interpreter/?data=" + result);
        return result;
    }


    public static String buildQueryForWater(OsmQueryParameters params) {
        String result = new OverpassQuery()
//                .format(OUTPUT_FORMAT)
                .boundingBox(
                        params.getMapCoords().getSouthernLat(),
                        params.getMapCoords().getWesternLon(),
                        params.getMapCoords().getNorthernLat(),
                        params.getMapCoords().getEasternLon()
                )
                .filterQuery()
                .node()
                .tag("amenity", "water")
                .prepareNext()
                .way()
                .tag("amenity", "water")
                .prepareNext()
                .rel()
                .tag("amenity", "water")
                .prepareNext()
                .node()
                .tag("amenity", "drinking_water")
                .prepareNext()
                .way()
                .tag("amenity", "drinking_water")
                .prepareNext()
                .rel()
                .tag("amenity", "drinking_water")
                .prepareNext()
                .node()
                .tag("amenity", "water_point")
                .prepareNext()
                .way()
                .tag("amenity", "water_point")
                .prepareNext()
                .rel()
                .tag("amenity", "water_point")
                .prepareNext()
                .node()
                .tag("amenity", "fountain")
                .prepareNext()
                .way()
                .tag("amenity", "fountain")
                .prepareNext()
                .rel()
                .tag("amenity", "fountain")
                .prepareNext()
                .way()
                .tag("natural", "bay")
                .prepareNext()
                .rel()
                .tag("natural", "bay")
                .prepareNext()
                .way()
                .tag("natural", "beach")
                .prepareNext()
                .rel()
                .tag("natural", "beach")
                .prepareNext()
                .way()
                .tag("natural", "cape")
                .prepareNext()
                .rel()
                .tag("natural", "cape")
                .prepareNext()
                .way()
                .tag("natural", "coastline")
                .prepareNext()
                .rel()
                .tag("natural", "coastline")
                .prepareNext()
                .way()
                .tag("natural", "glacier")
                .prepareNext()
                .rel()
                .tag("natural", "glacier")
                .prepareNext()
                .way()
                .tag("natural", "mud")
                .prepareNext()
                .rel()
                .tag("natural", "mud")
                .prepareNext()
                .way()
                .tag("natural", "spring")
                .prepareNext()
                .rel()
                .tag("natural", "spring")
                .prepareNext()
                .way()
                .tag("natural", "water")
                .prepareNext()
                .rel()
                .tag("natural", "water")
                .prepareNext()
                .way()
                .tag("natural", "wetland")
                .prepareNext()
                .rel()
                .tag("natural", "wetland")
                .prepareNext()
                .way()
                .tag("surface", "mud")
                .prepareNext()
                .rel()
                .tag("surface", "mud")

                .end()
                .output(OutputVerbosity.BODY, OutputModificator.CENTER, OutputOrder.QT, params.getOutputLimit())
                .build();

        result = "[out:json]" + result; // hack to add format in proper way, .format() in builder not working
        System.out.println("http://overpass-api.de/api/interpreter/?data=" + result);
        return result;
    }

    public static String buildQueryForIndustrial(OsmQueryParameters params) {
        String result = new OverpassQuery()
//                .format(OUTPUT_FORMAT)
                .boundingBox(
                        params.getMapCoords().getSouthernLat(),
                        params.getMapCoords().getWesternLon(),
                        params.getMapCoords().getNorthernLat(),
                        params.getMapCoords().getEasternLon()
                )
                .filterQuery()
                .way()
                .tag("amenity", "college")
                .prepareNext()
                .rel()
                .tag("amenity", "college")
                .prepareNext()
                .way()
                .tag("amenity", "hospital")
                .prepareNext()
                .rel()
                .tag("amenity", "hospital")
                .prepareNext()
                .way()
                .tag("amenity", "school")
                .prepareNext()
                .rel()
                .tag("amenity", "school")
                .prepareNext()
                .way()
                .tag("amenity", "university")
                .prepareNext()
                .rel()
                .tag("amenity", "university")
                .prepareNext()
                .way()
                .tag("amenity", "brownfield")
                .prepareNext()
                .rel()
                .tag("amenity", "brownfield")
                .prepareNext()
                .way()
                .tag("landuse", "cemetery")
                .prepareNext()
                .rel()
                .tag("landuse", "cemetery")
                .prepareNext()
                .way()
                .tag("landuse", "commercial")
                .prepareNext()
                .rel()
                .tag("landuse", "commercial")
                .prepareNext()
                .way()
                .tag("landuse", "construction")
                .prepareNext()
                .rel()
                .tag("landuse", "construction")
                .prepareNext()
                .way()
                .tag("landuse", "depot")
                .prepareNext()
                .rel()
                .tag("landuse", "depot")
                .prepareNext()
                .way()
                .tag("landuse", "garages")
                .prepareNext()
                .rel()
                .tag("landuse", "garages")
                .prepareNext()
                .way()
                .tag("landuse", "industrial")
                .prepareNext()
                .rel()
                .tag("landuse", "industrial")
                .prepareNext()
                .way()
                .tag("landuse", "quarry")
                .prepareNext()
                .rel()
                .tag("landuse", "quarry")
                .prepareNext()
                .way()
                .tag("landuse", "railway")
                .prepareNext()
                .rel()
                .tag("landuse", "railway")
                .prepareNext()
                .way()
                .tag("landuse", "residential")
                .prepareNext()
                .rel()
                .tag("landuse", "residential")
                .prepareNext()
                .way()
                .tag("landuse", "retail")
                .prepareNext()
                .rel()
                .tag("landuse", "retail")
                .prepareNext()
                .way()
                .tag("landuse", "water")
                .prepareNext()
                .rel()
                .tag("landuse", "water")
                .prepareNext()
                .way()
                .tag("surface", "paved")
                .prepareNext()
                .rel()
                .tag("surface", "paved")
                .prepareNext()
                .way()
                .tag("surface", "asphalt")
                .prepareNext()
                .rel()
                .tag("surface", "asphalt")
                .prepareNext()
                .way()
                .tag("surface", "sett")
                .prepareNext()
                .rel()
                .tag("surface", "sett")
                .prepareNext()
                .way()
                .tag("surface", "concrete")
                .prepareNext()
                .rel()
                .tag("surface", "concrete")
                .prepareNext()
                .way()
                .tag("surface", "paving_stones")
                .prepareNext()
                .rel()
                .tag("surface", "paving_stones")
                .prepareNext()
                .way()
                .tag("surface", "cobblestone")
                .prepareNext()
                .rel()
                .tag("surface", "cobblestone")
                .prepareNext()
                .end()
                .output(OutputVerbosity.BODY, OutputModificator.CENTER, OutputOrder.QT, params.getOutputLimit())
                .build();

        result = "[out:json]" + result; // hack to add format in proper way, .format() in builder not working
        System.out.println("http://overpass-api.de/api/interpreter/?data=" + result);
        return result;
    }
}
